swagger: "2.0"
info:
  description: "This is a sample API for the Library Management System."
  version: "1.0.0"
  title: "Library API"
host: "localhost:5000"
basePath: ""
schemes:
  - "http"

securityDefinitions:
  BearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"

paths:
  /users:
    post:
      summary: "Register a new user"
      description: "Creates a new user with the provided details."
      tags:
        - "Users"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User registration data"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User created successfully"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid data or user already exists"
  /users/login:
    post:
      summary: "User Login"
      description: "Login a user and return a JWT token."
      tags:
        - "Users"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User login credentials"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Login successful"
          schema:
            type: "object"
            properties:
              access_token:
                type: "string"
        401:
          description: "Invalid credentials"

  /books:
    get:
      summary: "Get all books"
      description: "Returns a list of all books."
      tags:
        - "Books"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list of books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
    post:
      summary: "Create a new book"
      description: "Adds a new book to the library."
      tags:
        - "Books"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book data"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        201:
          description: "Book created successfully"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid data"

  /books/{bookId}:
    get:
      summary: "Get a single book"
      description: "Returns a book by ID."
      tags:
        - "Books"
      parameters:
        - in: "path"
          name: "bookId"
          required: true
          type: "integer"
          description: "ID of the book"
      responses:
        200:
          description: "Book found"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Book not found"
    put:
      summary: "Update a book"
      description: "Updates the details of a book."
      tags:
        - "Books"
      consumes:
        - "application/json"
      parameters:
        - in: "path"
          name: "bookId"
          required: true
          type: "integer"
          description: "ID of the book"
        - in: "body"
          name: "body"
          description: "Updated book data"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        200:
          description: "Book updated successfully"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Book not found"
    delete:
      summary: "Delete a book"
      description: "Removes a book from the library."
      tags:
        - "Books"
      parameters:
        - in: "path"
          name: "bookId"
          required: true
          type: "integer"
          description: "ID of the book"
      responses:
        204:
          description: "Book deleted successfully"
        404:
          description: "Book not found"

  /admin/users:
    get:
      summary: "View all users"
      description: "Allows an admin to view all users."
      tags:
        - "Admin"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "A list of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        403:
          description: "Forbidden"

  /admin/borrowed-books:
    get:
      summary: "View all borrowed books"
      description: "Allows an admin to view all borrowed books."
      tags:
        - "Admin"
      security:
        - BearerAuth: []
      responses:
        200:
          description: "A list of borrowed books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Borrow"
        403:
          description: "Forbidden"

  /admin/borrow/{borrowId}:
    delete:
      summary: "Delete a borrow record"
      description: "Allows an admin to delete a borrow record."
      tags:
        - "Admin"
      security:
        - BearerAuth: []
      parameters:
        - in: "path"
          name: "borrowId"
          required: true
          type: "integer"
          description: "ID of the borrow record"
      responses:
        204:
          description: "Borrow record deleted successfully"
        403:
          description: "Forbidden"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
        type: "string"
        example: "john_doe"
      email:
        type: "string"
        example: "john.doe@example.com"
      is_admin:
        type: "boolean"
        example: false

  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      title:
        type: "string"
        example: "The Pragmatic Programmer"
      author:
        type: "string"
        example: "Andy Hunt"
      published_date:
        type: "string"
        format: "date"
        example: "1999-10-20"
      isbn:
        type: "string"
        example: "9780201616224"
      pages:
        type: "integer"
        example: 352
      cover:
        type: "string"
        example: "https://example.com/pragmatic.jpg"
      language:
        type: "string"
        example: "English"

  Borrow:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      user_id:
        type: "integer"
        example: 1
      book_id:
        type: "integer"
        example: 1
      borrow_date:
        type: "string"
        format: "date-time"
        example: "2024-09-25T12:34:56Z"
      return_date:
        type: "string"
        format: "date-time"
        example: "2024-10-01T12:34:56Z"
      overdue_fine:
        type: "number"
        format: "float"
        example: 10.0
